[tool.poetry]
name = "docformatter"
version = "1.5.1"
description = "Formats docstrings to follow PEP 257"
authors = ["Steven Myint"]
maintainers = [
    "Doyle Rowland <doyle.rowland@reliaqual.com>",
]
license = "Expat"
readme = "README.rst"
homepage = "https://github.com/PyCQA/docformatter"
repository = "https://github.com/PyCQA/docformatter"
documentation = "https://github.com/PyCQA/docformatter"
keywords = [
    "PEP 257", "pep257", "style", "formatter", "docstrings",
]
classifiers=[
          'Intended Audience :: Developers',
          'Environment :: Console',
          'Programming Language :: Python :: 3',
          'Programming Language :: Python :: 3.6',
          'Programming Language :: Python :: 3.7',
          'Programming Language :: Python :: 3.8',
          'Programming Language :: Python :: 3.9',
          'Programming Language :: Python :: 3.10',
          'Programming Language :: Python :: Implementation',
          'Programming Language :: Python :: Implementation :: PyPy',
          'Programming Language :: Python :: Implementation :: CPython',
          'License :: OSI Approved :: MIT License',
      ]
packages = [{include = "docformatter", from = "src"}]
include = ["LICENSE"]

[tool.poetry.dependencies]
python = "^3.6"
charset_normalizer = "^2.0.0"
tomli = [
    {version="<2.0.0", optional=true, python="<3.7"},
    {version="^2.0.0", optional=true, python=">=3.7"},
]
untokenize = "^0.1.1"

[tool.poetry.dev-dependencies]
autopep8 = "^1.7.0"
black = [
    {version = "^22.0.0", python = ">=3.6.2"},
]
coverage = [
    {extras = ["toml"], version = "^6.2.0", python = "<3.7"},
    {extras = ["toml"], version = "^6.4.0", python = ">=3.7"},
]
isort = [
    {version = "<5.10.0", python = "<3.6.1"},
    {version = "^5.10.0", python = ">=3.6.1"},
]
mock = "^4.0.0"
mypy = "0.971"
pycodestyle = "^2.8.0"
pydocstyle = "^6.1.1"
pylint = [
    {version = "^2.12.0", python = "<3.7.2"},
    {version = "^2.14.0", python = ">=3.7.2"},
]
pytest = [
    {version = "<7.1.0", python = "<3.7"},
    {version = "^7.1.0", python = ">=3.7"},
]
pytest-cov = "^3.0.0"
rstcheck = [
    {version = "<6.0.0", python = "<3.7"},
    {version = "^6.1.0", python = ">=3.7"},
]
tox = "^3.25.0"
Sphinx = "^5.0.0"
twine = [
    {version="<4.0.0", python = "<3.7"},
    {version="^4.0.0", python = ">=3.7"},
]

[tool.poetry.extras]
tomli = ["tomli"]

[tool.poetry.scripts]
docformatter = "docformatter.__main__:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pylint.master]
ignore-paths = [
    "tests*",
]

[tool.pylint.messages_control]
disable = [
    "fixme",
    "import-outside-toplevel",
    "inconsistent-return-statements",
    "invalid-name",
    "no-else-return",
    "no-member",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-locals",
    "too-many-return-statements",
    "useless-object-inheritance",
]

[tool.docformatter]
wrap-summaries = 79
wrap-descriptions = 72
non-strict = false

[tool.pydocstyle]
convention = "pep257"

[tool.pytest.ini_options]
markers = [
    "unit: mark the test as a unit test.",
    "system: mark the test as a system test.",
]

[tool.coverage.run]
branch = true
cover_pylib = false
omit = [
    '*/site-packages/*',
    '*/*pypy/*',
    '*/tests/*',
    '__init__.py',
    'setup.py',
]
relative_files = true

[tool.coverage.report]
omit = [
    '*/site-packages/*',
    '*/*pypy/*',
    '*/tests/*',
    '__init__.py',
    'setup.py',
]
exclude_lines = [
	'pragma: no cover',
	'import',
]
show_missing = true

[tool.coverage.xml]
output = 'coverage.xml'

[tool.black]
line-length = 79
target-version = ['py36', 'py37', 'py38', 'py39', 'py310']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
known_first_party = 'docformatter'
known_third_party = ['toml']
import_heading_firstparty = 'docformatter Package Imports'
import_heading_localfolder = 'docformatter Local Imports'
import_heading_stdlib = 'Standard Library Imports'
import_heading_thirdparty = 'Third Party Imports'
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 79

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    py36
    py37
    py38
    py39
    py310
    pypy3
    coverage
    style
isolated_build = true
skip_missing_interpreters = true
skipsdist = true

[gh-actions]
python =
    3.6: py36
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    pypy-3.6: pypy3

[testenv]
description = run the test suite using pytest under {basepython}
deps =
    charset_normalizer
    coverage[toml]
    mock
    pytest
    pytest-cov
    tomli
    untokenize
setenv =
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
commands =
    pip install -U pip
    pip install --prefix={toxworkdir}/{envname} -e .[tomli]
    pytest -s -x -c {toxinidir}/pyproject.toml \
        --cache-clear \
        --cov=docformatter \
        --cov-config={toxinidir}/pyproject.toml \
        --cov-branch \
        {toxinidir}/tests/

[testenv:coverage]
description = combine coverage data and create report
setenv =
    COVERAGE_FILE = {toxworkdir}/.coverage
skip_install = true
deps =
    coverage[toml]
parallel_show_output = true
commands =
    coverage combine
    coverage report -m
    coverage xml -o {toxworkdir}/coverage.xml
depends = py36, py37, py38, py39, py310, pypy3

[testenv:style]
description = run autoformatters and style checkers
deps =
    charset_normalizer
    docformatter
    pycodestyle
    pydocstyle
    pylint
    rstcheck
    toml
    untokenize
commands =
    docformatter --recursive {toxinidir}/src/docformatter
    pycodestyle {toxinidir}/src/docformatter
    pydocstyle {toxinidir}/src/docformatter
    pylint --rcfile={toxinidir}/pyproject.toml {toxinidir}/src/docformatter
    rstcheck --report-level=1 {toxinidir}/README.rst
"""
