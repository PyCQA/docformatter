# This workflow runs when a version tag is pushed.
#
# - Get new tag.
# - Build new release.
# - If release tag:
#     - Build release.
#     - Generate GitHub release if build succeeds.
#     - Upload wheel to GitHub release if build succeeds.
#     - Upload wheel to Test PyPi if build succeeds. (Future)
#     - Test install from Test PyPi. (Future)
#     - Upload wheel to PyPi if test install succeeds. (Future)
name: Push Version Tag Workflow

on:
  push:
    tags:
      - 'v*'

jobs:
  request-release:
    name: Request Release PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: master

      - name: Get new tag
        id: newversion
        run: |
          new_tag=${GITHUB_REF/refs\/tags\//}
          new_version=$(echo $new_tag | sed 's/.rc[0-9]*//')
          echo "new_tag=$(echo $new_tag)" >> $GITHUB_OUTPUT
          echo "new_version=$(echo $new_version)" >> $GITHUB_OUTPUT
          echo "New tag is: $new_tag"
          echo "New version is: $new_version"
          echo "GitHub ref: ${{ github.ref }}"

      - name: Build release
        id: build
        run: |
          pip install -U pip poetry twine
          poetry build && twine check dist/* && echo "build_ok=1" >> $GITHUB_ENV

      - name: Cut the release
        id: cutrelease
        if: ${{ !contains( steps.newversion.output.new_tag, 'rc' ) && env.build_ok == 1 }}
        uses: release-drafter/release-drafter@v5
        with:
          name: "v${{ steps.newversion.outputs.new_tag }}"
          tag: "v${{ steps.newversion.outputs.new_tag }}"
          version: "${{ steps.newversion.outputs.new_tag }}"
          prerelease: false
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print release info
        run: |
          echo ${{ steps.cutrelease.outputs.id }}
          echo ${{ steps.cutrelease.outputs.name }}
          echo ${{ steps.cutrelease.outputs.tag_name }}
          echo ${{ steps.cutrelease.outputs.html_url }}
          echo ${{ steps.cutrelease.outputs.upload_url }}

      - name: Upload wheel to GitHub release
        id: upload-wheel
        if: ${{ env.build_ok == 1 }}
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ steps.cutrelease.outputs.upload_url }}

#      - name: Publish to Test PyPi
#        if: ${{ !contains( steps.newversion.output.new_tag, 'rc' ) && env.build_ok == 1 }}
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          user: __token__
#          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
#          repository_url: https://test.pypi.org/legacy/

#      - name: Test install from Test PyPI
#        if: ${{ !contains( steps.newversion.output.new_tag, 'rc' ) && env.build_ok == 1 }}
#        run: |
#          sudo apt-get update
#          pip install \
#          --index-url https://test.pypi.org/simple/ \
#          --extra-index-url https://pypi.org/simple \
#          docformatter==${{ steps.newversion.outputs.new_version }} && echo "install_ok=1" >> $GITHUB_ENV

#      - name: Publish to PyPi
#        if: ${{ !contains( steps.newversion.output.new_tag, 'rc' ) && env.install_ok == 1 }}
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          user: __token__
#          password: ${{ secrets.PYPI_API_TOKEN }}
